apply {
    plugin 'java'
    plugin 'maven'
    plugin 'eclipse-wtp'
    plugin 'jetty'
    plugin 'war'
    plugin 'sonar-runner'
}

group = projectGroup
archivesBaseName = projectArchivesBaseName
version = projectVersion

description = projectDescription
sourceCompatibility = projectSourceCompatibility
targetCompatibility = projectTargetCompatibility

[compileJava, compileTestJava]*.options*.encoding = projectEncoding

[jettyRun, jettyRunWar, jettyStop]*.stopPort = jettyStopPort.asType(Integer.class)
[jettyRun, jettyRunWar, jettyStop]*.stopKey = 'stopKey'

ext {
    mainClass = projectMainClass
    
    archivaUploadCredential = {
        authentication(
            userName: archivaUser, 
            password: archivaPassword)
    }
}

sonarRunner {
    sonarProperties {
        property "sonar.host.url", "http://localhost:18090/sonarqube"
    }
}

repositories {
    maven {
        url internalRepository
        
        credentials {
            username archivaUser
            password archivaPassword
        }
    }
    
    maven {
        url libsRepository
        
        credentials {
            username archivaUser
            password archivaPassword
        }
    }
    
    maven {
        url releasesRepository
        
        credentials {
            username archivaUser
            password archivaPassword
        }
    }
    
    maven {
        url snapshotRepository
        
        credentials {
            username archivaUser
            password archivaPassword
        }
    }
    
    maven {
        url warReleasesRepository
        
        credentials {
            username archivaUser
            password archivaPassword
        }
    }
    
    maven {
        url warSnapshotRepository
        
        credentials {
            username archivaUser
            password archivaPassword
        }
    }
}

uploadArchives {
    repositories {
        mavenDeployer {
            repository(
                url: warReleasesRepository, project.ext.archivaUploadCredential)        
            snapshotRepository(
                url: warSnapshotRepository, project.ext.archivaUploadCredential)
        }
    }
}

dependencies {
    providedCompile "javax.servlet:servlet-api:$javaxServletVersion",
                    "javax.ws.rs:jsr311-api:$jsr311Version"
        
    compile "aopalliance:aopalliance:$aopallianceVersion",
            "commons-logging:commons-logging:$commonsLoggingVersion",
                
            "org.springframework:spring-aop:$springVersion",
            "org.springframework:spring-beans:$springVersion",
            "org.springframework:spring-context:$springVersion",
            "org.springframework:spring-core:$springVersion",
            "org.springframework:spring-expression:$springVersion",
            "org.springframework:spring-jdbc:$springVersion",
            "org.springframework:spring-tx:$springVersion",
            "org.springframework:spring-web:$springVersion",
            "org.springframework:spring-webmvc:$springVersion",
    
            "org.springframework.security:spring-security-core:$springSecurityVersion",
            "org.springframework.security:spring-security-config:$springSecurityVersion",
            "org.springframework.security:spring-security-web:$springSecurityVersion",            
            
            "log4j:log4j:$log4jVersion",
            "c3p0:c3p0:$c3p0Version",
            "net.sf.jt400:jt400:$jt400Version",
            "com.oracle:ojdbc6:$ojdbcVersion",
            "com.oracle:ucp:$ucpVersion",
    
            "com.fasterxml.jackson.core:jackson-core:$jackson2Version",
            "com.fasterxml.jackson.core:jackson-annotations:$jackson2Version",
            "com.fasterxml.jackson.core:jackson-databind:$jackson2Version",
    
            "commons-digester:commons-digester:$commonsDigesterVersion",
            "commons-collections:commons-collections:$commonsCollectionsVersion",
            "commons-beanutils:commons-beanutils:$commonsBeanutilsVersion",
            "com.google.code.maven-play-plugin.org.apache.commons:commons-javaflow:$commonsJavaflowVersion",
            "eclipse:jdtcore:$jdtcoreVersion",
    
            "com.baz.scc.commons:cjcrl-baz-commons-base:$bazCommonsBaseVersion",
            "com.baz.scc.commons:cjcrl-baz-commons-support:$bazCommonsSupportVersion",
            "com.baz.scc.commons:cjcrl-baz-commons-dao:$bazCommonsDaoVersion",
            "com.baz.scc.seguridad:cjcrl-baz-seguridad:$bazSeguridadVersion",
            "com.baz.scc.commons:cjcrl-baz-commons-web:$bazCommonsWebVersion",
            "com.baz.scc.appcontrol:cjcrl-app-control:$appControlVersion",
            "org.xerial:sqlite-jdbc:3.7.2"
    
    runtime "javax.servlet:jstl:$jstlVersion",
    
            "com.sun.jersey:jersey-core:$jerseyVersion",
            "com.sun.jersey:jersey-client:$jerseyVersion",
            "com.sun.jersey:jersey-json:$jerseyVersion",
            
            "org.codehaus.jackson:jackson-jaxrs:$jacksonVersion",
            "org.codehaus.jackson:jackson-xc:$jacksonVersion",
            "org.codehaus.jackson:jackson-core-asl:$jacksonVersion",
            "org.codehaus.jackson:jackson-mapper-asl:$jacksonVersion",
    
            "org.codehaus.jettison:jettison:$jettisonVersion"
    
    testCompile "junit:junit:$junitVersion",
                "org.springframework:spring-test:$springVersion",
                "org.hamcrest:hamcrest-core:$hamcrestCoreVersion"
}

war {   
    manifest {
        attributes 'Implementation-Title': projectTitle, 
                   'Implementation-Version': projectVersion,
                   'Class-Path': configurations.runtime.files.collect { "lib/$it.name" }.join(' ')
    }
}

javadoc {
    options.encoding = projectEncoding
}

task javadocJar(type: Jar, dependsOn: 'javadoc') {
    classifier = 'javadoc'
    
    from javadoc.destinationDir    
}

task sourcesJar(type: Jar) {
    classifier = 'sources'

    from sourceSets.main.allSource
}

artifacts {
    archives javadocJar
    archives sourcesJar
}

test {
    testLogging {
        events 'failed'
        exceptionFormat 'short'
        
        debug {
            events 'started', 'skipped', 'failed'
            exceptionFormat 'full'
        }
        
        error {
            events 'skipped', 'failed'
            exceptionFormat 'full'
        }
    }
}

